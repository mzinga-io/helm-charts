basedns: "mzinga.io"
containerPort: 3000
env: production
graphql_disable_displayground_in_production: "1"
tenant:
  name: "demo"
  email: "info@mzinga.io"
  env: "prod"
  firstName: "sample"
  lastName: "tenant"
  password: "84b60b91-628b-42e1-adf2-00c12482f27e"
  tier: "basic"
  site:
    title: "Demo frontend"
    titleSuffix: "Demo frontend"
    description: "Demo frontend"
    topCardList:
      title: "Our Services"
      tag: "services"
    bottomCardList:
      title: "Our People"
      tag: "people"
    topPage:
      title: "About Us"
      slug: "about-us"
      uri: "/about-us"
    formPage:
      title: "Contact Us"
      slug: "contact-us"
      uri: "/contact-us"
nodePool:
  priority: "Regular"
  spot:
    tolerations:
      - key: "kubernetes.azure.com/scalesetpriority"
        operator: "Equal"
        value: "spot"
        effect: "NoSchedule"
secret: cd9a7f30-e078-45fc-b6d2-9e4ebf6420ae
sendgridApiKey: ""
publicServerURL: https://admin-demo.mzinga.io
cron_jobs:
  extensibility: ce-enabler
  scheduler: time-based-executions
  ## Additional tolerations for all mzinga cronjobs
  ##
  tolerations: []
database:
  secretRef: mzinga-users-creds
  serviceURI: mongodb-psmdb-db-newesis.mongodb.svc.cluster.local
  additionalOptions:
    api: readPreference=secondary
    backoffice: readPreference=primary
    ws: readPreference=secondary
  backup_enabled: true
  cron_jobs:
    username: backup
    password: backup123456
    configmap_scripts: mzinga-db-jobs-scripts
    secret: mzinga-db-jobs-secret
    azure_storage:
      account: ""
      container: ""
      prefix: ""
      credentials_key: ""
    backup: mzinga-db-backup-job
    restore: mzinga-db-restore-job
    scheduled_hour: 2
    ## Additional tolerations for database backup job
    ##
    tolerations: []
first_user_hook:
  name: mzinga-first-user
  debug: false
  ## Additional tolerations for first user hook job
  ##
  tolerations: []

## pvc_sync_hook values
##
pvc_sync_hook:
  ## Name of the job
  ##
  name: mzinga-pvc-sync
  ## Enable debug mode
  ##
  debug: false
  enabled: false
  ## Additional tolerations for pvc sync hook job
  ##
  tolerations: []

copy_files_hook:
  ## Enable copy_files Hook
  ##
  enabled: false
  name: mzinga-copy-files
  debug: false
  azuredevops_pat: ""
  ## Additional tolerations for copy files hook job
  ##
  tolerations: []
scheduler:
  name: mzinga-scheduler
  debug: true
common:
  enabled: true
  name: mzinga-common
backoffice:
  name: mzinga-bo
  replicas: 1
  image:
    repository: mzinga/payload/gh/backoffice
    # renovate: image=mzinga-io/mzinga-apps
    tag: "0.3.25"
    registry: newesissrl.azurecr.io
  publicURL: ""
  tolerations: []
  ingress:
    # -- Name of the ingress class that will be used when creating backoffice ingress resource.
    class: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
      kubernetes.io/ingress.allow-http: 'false'
      kubernetes.io/tls-acme: 'true'
      nginx.ingress.kubernetes.io/proxy-body-size: "100m"
  # -- Affinities for MZinga backoffice service
  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #           - key: mzinga.io/tenants
    #             operator: In
    #             values:
    #               - "true"
  resources:
    requests:
      memory: 250Mi
      cpu: 0.5
    limits:
      memory: 500Mi
      cpu: 1
  customization:
    PAYLOAD_PUBLIC_CUSTOM_ICON_SRC: https://via.placeholder.com/32x32/008000
    PAYLOAD_PUBLIC_CUSTOM_LOGO_SRC: https://via.placeholder.com/180x180/FFFF00
    PAYLOAD_PUBLIC_DISABLED_ENTITIES_SLUGS: organizations,projects,environments,assets
    PAYLOAD_PUBLIC_DISABLE_LOCAL_STRATEGY: "0"
  otel_log_level: ""
  otel_console_exporter: "1"
api:
  name: mzinga-api
  replicas: 1
  # -- Image specification for MZinga api.
  image:
    repository: mzinga/payload/gh/api
    # renovate: image=mzinga-io/mzinga-apps
    tag: "0.3.25"
    registry: newesissrl.azurecr.io
  publicURL: ""
  api_key: ""
  tolerations: []
  ingress:
    # -- Name of the ingress class that will be used when creating api ingress resource.
    class: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
      kubernetes.io/ingress.allow-http: 'false'
      kubernetes.io/tls-acme: 'true'
      nginx.ingress.kubernetes.io/proxy-body-size: "100m"
  # -- Affinities for MZinga api service
  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #           - key: mzinga.io/tenants
    #             operator: In
    #             values:
    #               - "true"
  resources:
    requests:
      memory: 250Mi
      cpu: 0.5
    limits:
      memory: 500Mi
      cpu: 1
  customization:
    PAYLOAD_PUBLIC_DISABLED_ENTITIES_SLUGS: organizations,projects,environments,assets
  otel_log_level: ""
  otel_console_exporter: "1"
ws:
  # -- Enable WebSocket deployment
  enabled: false
  name: mzinga-ws
  replicas: 1
  image:
    repository: mzinga/payload/ws-service
    tag: ""
    registry: newesissrl.azurecr.io
  publicURL: ""
  tolerations: []
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
      kubernetes.io/ingress.allow-http: 'false'
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: 'true'
      nginx.ingress.kubernetes.io/proxy-body-size: "100m"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "7200"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "7200"
  # -- Affinities for MZinga websocket service
  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #           - key: mzinga.io/tenants
    #             operator: In
    #             values:
    #               - "true"
  resources:
    requests:
      memory: 250Mi
      cpu: 0.5
    limits:
      memory: 500Mi
      cpu: 1
  customization: {}
  otel_log_level: ""
  otel_console_exporter: "1"
sampleFrontend:
  # -- Enable sample frontend for MZinga
  enabled: false
  name: mzinga-sample-fe
  replicas: 1
  image:
    repository: mzinga/payload/sample-frontend
    tag: ""
    registry: newesissrl.azurecr.io
  ingress:
    # -- Name of the ingress class that will be used when creating frontend ingress resource.
    class: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
      kubernetes.io/ingress.allow-http: 'false'
      kubernetes.io/tls-acme: 'true'
  tolerations: []
  # -- Affinities for MZinga frontend service
  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #           - key: mzinga.io/tenants
    #             operator: In
    #             values:
    #               - "true"
sync:
  enabled: false
  name: mzinga-to-zitadel
  replicas: 1
  env: prod
  image:
    repository: mzinga-to-zitadel
    tag: ""
    registry: newesissrl.azurecr.io
  otel:
    disableTracing: "0"
    consoleExporter: "1"
    logLevel: debug
  mzinga:
    apiKey: ""
  repository:
    baseUrl: https://dev.azure.com/newesis/Code%20Name%20MZinga
    instancesUrl: /_apis/git/repositories/infrastructure/items?download=false&api-version=7.1-preview.1&scopePath=/__instances__/mzinga-prod.tfvars.json
    commitsUrl: /_apis/git/repositories/infrastructure/commits?searchCriteria.%24top=1&searchCriteria.itemVersion.version=main&api-version=7.1-preview.1
    pushesUrl: /_apis/git/repositories/infrastructure/pushes?api-version=7.1-preview.2
    queueUrl: /_apis/pipelines/59/runs?api-version=7.1-preview.1
    pat: ""
  zitadel:
    bearerToken: ""
  nodePool:
    priority: "Regular"
    spot:
      tolerations:
        - key: "kubernetes.azure.com/scalesetpriority"
          operator: "Equal"
          value: "spot"
          effect: "NoSchedule"
  resources:
    requests:
      memory: 250Mi
      cpu: 0.5
    limits:
      memory: 500Mi
      cpu: 1
  tolerations: []
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: mzinga.io/tenants
                operator: In
                values:
                  - "true"
zitadel_database:
  name: zitadel-db
  backup_enabled: false
  secret: zitadel-database-jobs-secret
  configmap_scripts: zitadel-db-jobs-scripts
  psql_host: postgresql-hl.zitadel
  psql_port: "5432"
  psql_postgres_user: postgres
  psql_postgres_password: postgres
  debug: true
  tolerations: []
telemetry:
  tempo_service_name: tempo.monitoring
  exporter_otlp_endpoint: http://opentelemetry-collector-mzinga.monitoring:4318

tolerations: []

# -- Storage classes to be created for MZinga deployment.
storageClasses:
  # -- Storage classes to use Azure file shares. Refer to this documentation: https://learn.microsoft.com/en-us/azure/aks/azure-csi-files-storage-provision
  azure: {}
    # -- Fill in this section with you Azure storage account name and access key.
    # storageAccount:
    #   name: ""
    #   key: ""
    # tier:
    #   cool:
    #     labels: {}
    #     annotations: {}
    #     provisioner: file.csi.azure.com
    #     parameters:
    #       shareAccessTier: Cool
    #       skuName: Standard_ZRS
    #     additionalParameters: {}
    #     reclaimPolicy: Delete
    #     mountOptions:
    #       - dir_mode=0777
    #       - file_mode=0777
    #       - uid=1000
    #       - gid=1000
    #       - mfsymlinks
    #       - nobrl
    #     allowVolumeExpansion: true
    #     volumeBindingMode: Immediate
    #   hot:
    #     labels: {}
    #     annotations: {}
    #     provisioner: file.csi.azure.com
    #     parameters:
    #       shareAccessTier: Hot
    #       skuName: Standard_ZRS
    #     additionalParameters: {}
    #     reclaimPolicy: Delete
    #     mountOptions:
    #       - dir_mode=0777
    #       - file_mode=0777
    #       - uid=1000
    #       - gid=1000
    #       - mfsymlinks
    #       - nobrl
    #     allowVolumeExpansion: true
    #     volumeBindingMode: Immediate
  # -- Storage classes to use AWS Elastic File system. refer to this documentation: https://aws.amazon.com/blogs/containers/introducing-efs-csi-dynamic-provisioning/
  aws: {}
    # accessPoint:
    #   labels: {}
    #   annotations: {}
    #   provisioner: efs.csi.aws.com
    #   parameters:
    #     basePath: /
    #     directoryPerms: '700'
    #     fileSystemId: fs-05fd76362f6a7888b
    #     provisioningMode: efs-ap
    #   additionalParameters: {}
    #   reclaimPolicy: Delete
    #   mountOptions: []
    #   allowVolumeExpansion: true
    #   volumeBindingMode: WaitForFirstConsumer
  # -- Storage classes to use Google Filestore. refer to this documentation: https://cloud.google.com/filestore/docs/csi-driver#storage-class
  google: {}
    # enterpriseMultishareRWX:
    #   provisioner: filestore.csi.storage.gke.io
    #   parameters:
    #     tier: "enterprise"
    #     multishare: "true"
    #     instanceStorageclassLabel: "enterprise-multishare-rwx"
    #     ## Refer to this documentation to better understand: https://cloud.google.com/filestore/docs/optimize-multishares#create_a_custom_storageclass
    #     ##
    #     maxVolumeSize: "256Gi"
    #   ## You may need this if you want to specify parameters
    #   ## for advanced configuration (i.e.: network, etc.).
    #   ## Refer to this: http://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/filestore-csi-driver#storage-class
    #   additionalParameters:
    #     network: "default"
    #   mountOptions: []
    #   reclaimPolicy: Delete
    #   allowVolumeExpansion: true
    #   volumeBindingMode: WaitForFirstConsumer

# -- Persistence section describe which volumes and claims will be created
persistence:
  # -- Volumes specification
  volumes:
    basic:
      capacity: 10Gi
      reclaimPolicy: Retain
      mountOptions:
        - dir_mode=0777
        - file_mode=0777
        - uid=1000
        - gid=1000
        - mfsymlinks
        - nobrl
    # pro:
    #   capacity: 100Gi
    #   reclaimPolicy: Retain
    #   mountOptions:
    #     - dir_mode=0777
    #     - file_mode=0777
    #     - uid=1000
    #     - gid=1000
    #     - mfsymlinks
    #     - nobrl
    # ultra:
    #   capacity: 1000Gi
    #   reclaimPolicy: Retain
    #   mountOptions:
    #     - dir_mode=0777
    #     - file_mode=0777
    #     - uid=1000
    #     - gid=1000
    #     - mfsymlinks
    #     - nobrl
